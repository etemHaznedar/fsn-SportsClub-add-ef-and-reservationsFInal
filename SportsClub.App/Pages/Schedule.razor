@page "/schedule/today"

@using SportsClub.Models.Dtos
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Todays trainings</PageTitle>

<h3>Schedule</h3>
@if (lessons == null)
{
    <h3>Loading lessons...</h3>
}

else if (lessons.Count() > 0)
{
    <LessonDetails Lesson="_selectedLesson" />

    <h3 class="mb-5">Workouts you can enroll on @DateOnly.FromDateTime(DateTime.Now)</h3>
    <div class="grid">

        @foreach (var lesson in lessons)
        {
            <LessonCard Lesson="lesson" OnSelected="HandleLessonSelected" />
        }
    </div>
}
else
{
    <h4>No more workouts today, check-in tomorrow!</h4>
}

@code {
    private LessonDto? _selectedLesson;

    /* Required members must be at least as visible as their containing type.
     * For example, a public class can't contain a required field that's protected. */
    public required IEnumerable<LessonDto> lessons = Enumerable.Empty<LessonDto>();

    protected override async Task OnInitializedAsync()
    {
        // Bij complexere view-logica beter om een Service-class te maken:
        // Lessons = await ScheduleService.GetTodaysLessons();
        try
        {
            // https://localhost:7263/api/Schedule/GetTodaysLessons
            var result = await Http.GetFromJsonAsync<IEnumerable<LessonDto>>("api/Schedule/GetTodaysLessons");
            lessons = result ?? Enumerable.Empty<LessonDto>();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading lesson data: {ex.Message}");
        }
    }

    private void HandleLessonSelected(LessonDto lesson)
       => _selectedLesson = lesson;
}